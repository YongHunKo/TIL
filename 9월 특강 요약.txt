김태화 강사님
1. 취업 준비하기
	1. 뭘준비해야하나
		서류전형 코딩테스트 1차인터뷰 2차인터뷰
		나는 취업할 준비가 되었는가
		무엇을 위해 개발자가 되고 싶은지?
			- 세상의 문제를 해결하고 싶은지? 기술적으로 조예를 가지고 싶은지?
		해당 분야의 핵심 기술에 대하여 어느정도로 숙지하고 있는지?
			- 리액트 앵글러 뷰 싱글페이지어플리케이션
			- 특징에 대한 간단한 설명? 유사한 다른 기술과의 장단점은?
		활용하는 언어/프레임워크 등의 올바른 사용법에 대해 알고 있는지?
			- 언어마다 추구하는 방향이 존재 -> 그 방향에 맞게 작성할 필요
		컴퓨터공학에 대한 대직을 꾸준히 학습하고 있는지?
			- 단순히 면접을 위한 cs공부가 아닌, 코드에 적용할 수 있는 cs공부
	2. 서류전형
		- 깔끔한 이력서(가독성 추구) -> 어떤 내용을 포함하고 있어야할까?
			- 개인의 추구 방향, 지원 이유 : '나'라는 사람이 가지고 있는 생각
			- 평소 무엇을 어떻게 학습? : 부족한 부분을 어떻게 해결하는지

		- 진행한 프로젝트들 정리 -> 서류 검토는 결국 코드를 본다!
			- 아쉬운 코드가 있다면 반드시 리팩토링 진행
			- 깃을 어떻게 활용하는지도 중요

		- 프로젝트 문서화(이력서/별도 문서) ->프로젝트들이 추구하는 방향을 정리 ->노션이 대세
			- 그림을 바탕으로 한 상세한 설명보다 중요한 것이 추구하는 방향
			- 어떤 프로젝트? 왜 진행? 진행하면서 배운 점은? 아쉬운 점은?
			- 진행 중 맞이했던 문제를 탐구/해결하는 모습을 보여주는 것이 중요

		- 의미있는 개발블로그 -> 진짜 배우고 느낀 것을 기록
			- 문제를 접했을 때의 해결과정 및 배운 점을 기록하는 것이 필요
			- 블로그 글의 숫자보다 중요한 것이 블로그 글의 질
			- 단순 코딩테스트 문제 풀이 글들로만 이루어져있으면 역효과

	3. 코딩테스트
		- 효율적인 알고리즘 -> 알고리즘 테스트의 정확성과 효율성 고려
			- 단 점수가 전부인가? NO 모두 맞춰도 불합격할 수 있다는 점
			- 문제은행식 풀이가 아니라, 왜 이런 형태로 풀이하는지 이해

		- 코딩 스타일(언어사용/협업 등) -> 결국 코드의 가독성
			- 변수명 등 네이밍 컨벤션, 코드의 전체 흐름 등이 중요
			- 주로 활용하게 될 언어로 진행 : Spring 개발을 희망한다면 java로
			- 알고리즘 테스트로 이 사람의 코드 스타일을 유추한다는 사실 파악

	4. 1차 인터뷰
		- 진행한 프로젝트 구두 설명 -> 프로젝트에 대한 개인의 생각 정리
			- 코드를 작성할 때 무엇을 염두에 두고 작성하였는지
			- 지금 코드를 다시 봤을 때 아쉬운 점은 무엇인지
			- 그렇다면 그 아쉬운 점을 어떻게 개선할 수 있는지
		- cs 지식에 대한 구두 설명 -> 단순 학습을 넘어 경험을 하면 베스트
			- 해당 cs지식이 본인 코드에 어떻게 적용이 되었는지
			- 가능하다면 네트워크를 구축해보는 것도 좋은 경험
		- 추구하는 개발 방향 공유 -> 코더를 넘어 개발자가 되기 위한 길
			- 개인의 단기/중기/장기 방향성이 명확히 정리되었는지
			- 신입이라고 단순히 열심히 배우겠다는 태도를 가지는 것은 지양
	5. 2차 인터뷰
		- 회사가 추구하는 가치관 공감 -> 이 회사는 내가 바라는 회사인가?
			- 왜 이회사를 지원했는지에 대한 멋있는 이유를 구상
			- 유명해서 돈을 많이 줘서 보다는 방향에 대한 일치를 찾아야
		- 조직에 적응하는 방식 -> 이 조직과 내가 잘 어울릴 수 있는 이유는?
			- 1차 인터뷰로 개발 문화를 유추할 수 있다면 베스트
			- 나는 그 문화에 동참 및 기여할 수 있는 것이 무엇이 있을까?
			- 개발자가 아닌 다른 사람들이랑은 어떻게 소통할 지도 생각
		- 개인의 강점과 조직 기여 가능성 -> 나를 채용해서 회사가 얻는 이점은?
			- 다양한 경험을 통한 강점 증빙 : 개발/ 열정~~

2. 회사 고르기 & 입사 후 모습
	가장 중요한 핵심 최소 2년이상 다닐만한 회사인가
	왜 2년? -> 회사의 코드 이해도가 높은 상황

	도메인 기업규모 재무상태 면접느낌

	1. 도메인
		- 코더와 개발자의 차이
		- 나는 어떤 도메인에 관심이 있을까
		- 도메인과 기술 방향은 관련이 있을가
		- 결국 무엇을 배우고 경험할 것인가
	2. 기업규모
		- 너무 작은 규모라면 리스크가 큰 문제
		- 너무 큰 규모라면 경험 폭이 좁아지는 문제
		- 기업 규모 대비 개발자의 비중은?
		- 레거시는 존재하는게 도움이 된다
	3. 재무상태
		- 스타트업에 겨울이 오는중
		- 자체적인 이익을 내는지
		- 투자금과 적자 폭의 비교분석
		- 회사의 생존 가능성에 대한 자체 판단
	4. 면접느낌
		- 면접관은 내가 같이 일할 사람이라는 생각
		- 이 사람한테 얻을 게 많다는 느낌을 받는지
		- 내 이력서를 얼마나 꼼꼼히 보고 왔는지
		- 질문에 대한 면접관의 반응 살펴보기

입사후
	5. 우선 순위 판단의 노력
		- 어떤 일의 중요성은 어느 정도인지, 언제까지 완료되어야 하는지 판단 필요
		- 어떤 개발에서는 빠른 기능 추가가 중요할 수도, 어떤 개발에서는 코드의 퀄리티를 신경 쓰는게 중요할 수도 
			-> 정답이 있는 문제는 아니므로 판단의 노력 필요
	6. 커뮤니케이션의 중요성
		- 자신만의 생각을 가지고 소통하는 것이 중요
		- 단 무작정 자기주장만 고집하는 것도 안되고 또 무작정 남의 의견을 수용만 하는 것도 안된다.
		- 서비스 / 프로젝트의 방향성을 고민하는 것에서 발전
	7. 다른 사람 코드를 이해
		- 회사에서는 처음부터 새로운 것을 만드는 것보다, 원래 있는 것 위에 추가로 작업하는 경우가 많다
			-> 기존에 작성된 코드들을 이해해야
		- 레거시는 무조건 이유가 있음을 파악 -> 그 이유가 무엇인지, 현재도 적용되는지, 수정한다면 어떻게 수정할 것인지 고려

3. 되돌아보기 & FAQ
	1. 팀 프로젝트 진행
		- 어떤 결과를 만들어내고 싶은가
		- 협업과 소통의 중요성-코딩 컨벤션,PR자료
		- 프로젝트 회고 . 무엇을 배웠는지. 아쉬운점과 아쉬운점이 발생된 이유
	2. 개인 프로젝트 진행
		- 작업물의 일부가 아닌 전체를 담당하는 경험
		- 왜 해당 프로젝트를 선택하였는지
		- 시간에 구애받지 않고 작업하는 경험
		- 결과 구현에 앞서 구현 과정에 중점
		- 팀으로 진행했을 때와의 차이 인식
	3. 프로젝트 리팩토링/기능추가
		- 나중에 보니 어떤 부분이 아쉬운지
		- 기존 코드 개선을 위한 접근방식 경험
		- 새로운 프로젝트 및 습득한 cs지식 등 바탕
	4. 근본적 정리 및 올바른 질문
















